{"version":3,"file":"components/avatar/avatar.js","sources":["webpack://purecn/./src/components/avatar/avatar.ts","webpack://purecn/./src/components/avatar/index.ts"],"sourcesContent":["import styles from './avatar.scss';\nexport class AvatarComponent extends HTMLElement {\n    constructor() {\n        super();\n        this.shadow = this.attachShadow({ mode: 'open' });\n        this.render();\n    }\n    static get observedAttributes() {\n        return ['src', 'alt', 'size', 'shape', 'fallback', 'status', 'delayMs'];\n    }\n    get src() {\n        return this.getAttribute('src') || '';\n    }\n    get alt() {\n        return this.getAttribute('alt') || '';\n    }\n    get size() {\n        return this.getAttribute('size') || 'md';\n    }\n    get shape() {\n        return this.getAttribute('shape') || 'circle';\n    }\n    get fallback() {\n        return this.getAttribute('fallback') || '';\n    }\n    get status() {\n        return this.getAttribute('status') || 'none';\n    }\n    get delayMs() {\n        return parseInt(this.getAttribute('delayMs') || '0', 10);\n    }\n    attributeChangedCallback(name, oldValue, newValue) {\n        if (oldValue !== newValue) {\n            this.render();\n        }\n    }\n    handleError() {\n        const fallback = this.fallback || this.alt.slice(0, 2).toUpperCase();\n        const avatarEl = this.shadow.querySelector('.avatar');\n        if (avatarEl) {\n            avatarEl.innerHTML = `<span class=\"fallback\" data-slot=\"avatar-fallback\">${fallback}</span>`;\n        }\n    }\n    render() {\n        const styleElement = document.createElement('style');\n        styleElement.textContent = AvatarComponent.styles;\n        this.shadow.innerHTML = '';\n        this.shadow.appendChild(styleElement);\n        // Add a delay for loading the image if specified\n        const delayAttr = this.delayMs > 0 ? `loading=\"lazy\" fetchpriority=\"low\"` : '';\n        // Image content with data-slot attribute for better styling options\n        const avatarContent = this.src\n            ? `<img \r\n           src=\"${this.src}\" \r\n           alt=\"${this.alt}\"\r\n           data-slot=\"avatar-image\"\r\n           ${delayAttr}\r\n         >`\n            : `<span class=\"fallback\" data-slot=\"avatar-fallback\">${this.fallback || this.alt.slice(0, 2).toUpperCase()}</span>`;\n        // Status indicator HTML if status is set\n        const statusHtml = this.status !== 'none'\n            ? `<span class=\"status-indicator ${this.status}\" data-slot=\"avatar-status\"></span>`\n            : '';\n        this.shadow.innerHTML += `\r\n      <div class=\"avatar ${this.size} ${this.shape}\" data-slot=\"avatar\">\r\n        ${avatarContent}\r\n        ${statusHtml}\r\n      </div>\r\n    `;\n        // Add error handler if image is present\n        if (this.src) {\n            const img = this.shadow.querySelector('img');\n            if (img) {\n                img.addEventListener('error', () => this.handleError());\n            }\n        }\n    }\n}\nAvatarComponent.styles = '';\n(() => {\n    if (typeof styles === 'string') {\n        AvatarComponent.styles = styles;\n    }\n})();\n// Register the component\nif (!customElements.get('pure-avatar')) {\n    customElements.define('pure-avatar', AvatarComponent);\n}\n","export * from './avatar';\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAmC;AAC5B;AACP;AACA;AACA,0CAA0C,cAAc;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uFAAuF,SAAS;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,SAAS;AAC3B,kBAAkB,SAAS;AAC3B;AACA,aAAa;AACb;AACA,oEAAoE,oDAAoD;AACxH;AACA;AACA,+CAA+C,YAAY;AAC3D;AACA;AACA,2BAA2B,WAAW,EAAE,WAAW;AACnD,UAAU;AACV,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,sBAAM;AACrB,iCAAiC,sBAAM;AACvC;AACA,CAAC;AACD;AACA;AACA;AACA;;;ACvFyB"}